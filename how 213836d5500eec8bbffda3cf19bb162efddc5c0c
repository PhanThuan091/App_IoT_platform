[33mcommit 213836d5500eec8bbffda3cf19bb162efddc5c0c[m
Author: Phan Thuan <thuanphan8482@gmail.com>
Date:   Sun May 11 09:42:32 2025 +0700

    update websocket

[1mdiff --git a/lib/screen/dashboard_screen.dart b/lib/screen/dashboard_screen.dart[m
[1mindex 57b447c..525a4ae 100644[m
[1m--- a/lib/screen/dashboard_screen.dart[m
[1m+++ b/lib/screen/dashboard_screen.dart[m
[36m@@ -1,7 +1,7 @@[m
 import 'package:flutter/material.dart';[m
[32m+[m[32mimport 'package:flutter/scheduler.dart'; // Th√™m ƒë·ªÉ s·ª≠ d·ª•ng SchedulerBinding[m
 import 'dart:async';[m
[31m-import 'package:mqtt_client/mqtt_client.dart';[m
[31m-import 'package:mqtt_client/mqtt_server_client.dart';[m
[32m+[m[32mimport 'package:web_socket_channel/io.dart';[m
 import '../widgets/weather_card.dart';[m
 import '../widgets/my_units_list.dart';[m
 import 'edit_units_screen.dart';[m
[36m@@ -14,11 +14,11 @@[m [mclass DashboardScreen extends StatefulWidget {[m
 class _DashboardScreenState extends State<DashboardScreen> {[m
   late String _currentTime;[m
   late String _greeting;[m
[31m-  late Timer _timer;[m
   late String _currentDate;[m
[31m-  MqttServerClient? _client; // Client MQTT[m
[32m+[m[32m  late Timer _timer;[m
[32m+[m[32m  IOWebSocketChannel? _channel; // WebSocket channel[m
   bool _isConnected = false; // Tr·∫°ng th√°i k·∫øt n·ªëi[m
[31m-  Map<String, bool> _deviceStatus = {}; // Tr·∫°ng th√°i thi·∫øt b·ªã (b·∫≠t/t·∫Øt)[m
[32m+[m[32m  Map<String, bool> _deviceStatus = {'Fan': false, 'Light': false}; // Tr·∫°ng th√°i thi·∫øt b·ªã[m
 [m
   @override[m
   void initState() {[m
[36m@@ -27,7 +27,82 @@[m [mclass _DashboardScreenState extends State<DashboardScreen> {[m
     _greeting = _getGreeting();[m
     _currentDate = _getCurrentDate();[m
     _timer = Timer.periodic(Duration(seconds: 1), _updateTime);[m
[31m-    _connectToServer(); // K·∫øt n·ªëi t·ªõi server khi kh·ªüi ƒë·ªông[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  @override[m
[32m+[m[32m  void didChangeDependencies() {[m
[32m+[m[32m    super.didChangeDependencies();[m
[32m+[m[32m    // Kh·ªüi t·∫°o WebSocket trong didChangeDependencies[m
[32m+[m[32m    if (_channel == null) {[m
[32m+[m[32m      _initializeWebSocket();[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  // Kh·ªüi t·∫°o WebSocket[m
[32m+[m[32m  void _initializeWebSocket() {[m
[32m+[m[32m    try {[m
[32m+[m[32m      _channel = IOWebSocketChannel.connect('ws://192.168.79.92:1880/ws/devices');[m
[32m+[m[32m      // _channel = IOWebSocketChannel.connect('ws://192.168.100.74:1880/ws/devices');[m
[32m+[m[32m      _channel!.stream.listen([m
[32m+[m[32m        (message) {[m
[32m+[m[32m          print('Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu: $message');[m
[32m+[m[32m          _handleReceivedMessage(message);[m
[32m+[m[32m        },[m
[32m+[m[32m        onDone: () {[m
[32m+[m[32m          print('K·∫øt n·ªëi WebSocket b·ªã ƒë√≥ng');[m
[32m+[m[32m          setState(() {[m
[32m+[m[32m            _isConnected = false;[m
[32m+[m[32m          });[m
[32m+[m[32m          // D√πng post-frame callback ƒë·ªÉ hi·ªÉn th·ªã SnackBar[m
[32m+[m[32m          SchedulerBinding.instance.addPostFrameCallback((_) {[m
[32m+[m[32m            ScaffoldMessenger.of(context).showSnackBar([m
[32m+[m[32m              SnackBar(content: Text('M·∫•t k·∫øt n·ªëi t·ªõi server')),[m
[32m+[m[32m            );[m
[32m+[m[32m          });[m
[32m+[m[32m        },[m
[32m+[m[32m        onError: (error) {[m
[32m+[m[32m          print('L·ªói WebSocket: $error');[m
[32m+[m[32m          setState(() {[m
[32m+[m[32m            _isConnected = false;[m
[32m+[m[32m          });[m
[32m+[m[32m          // D√πng post-frame callback ƒë·ªÉ hi·ªÉn th·ªã SnackBar[m
[32m+[m[32m          SchedulerBinding.instance.addPostFrameCallback((_) {[m
[32m+[m[32m            ScaffoldMessenger.of(context).showSnackBar([m
[32m+[m[32m              SnackBar(content: Text('L·ªói k·∫øt n·ªëi t·ªõi server')),[m
[32m+[m[32m            );[m
[32m+[m[32m          });[m
[32m+[m[32m        },[m
[32m+[m[32m      );[m
[32m+[m[32m      setState(() {[m
[32m+[m[32m        _isConnected = true;[m
[32m+[m[32m      });[m
[32m+[m[32m      print('ƒê√£ k·∫øt n·ªëi t·ªõi WebSocket server');[m
[32m+[m[32m    } catch (e) {[m
[32m+[m[32m      print('L·ªói kh·ªüi t·∫°o WebSocket: $e');[m
[32m+[m[32m      setState(() {[m
[32m+[m[32m        _isConnected = false;[m
[32m+[m[32m      });[m
[32m+[m[32m      // D√πng post-frame callback ƒë·ªÉ hi·ªÉn th·ªã SnackBar[m
[32m+[m[32m      SchedulerBinding.instance.addPostFrameCallback((_) {[m
[32m+[m[32m        ScaffoldMessenger.of(context).showSnackBar([m
[32m+[m[32m          SnackBar(content: Text('Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server')),[m
[32m+[m[32m        );[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  // X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ WebSocket[m
[32m+[m[32m  void _handleReceivedMessage(String message) {[m
[32m+[m[32m    if (message.contains('device')) {[m
[32m+[m[32m      final parts = message.split(':');[m
[32m+[m[32m      if (parts.length == 3) {[m
[32m+[m[32m        final deviceName = parts[1];[m
[32m+[m[32m        final status = parts[2] == 'ON';[m
[32m+[m[32m        setState(() {[m
[32m+[m[32m          _deviceStatus[deviceName] = status;[m
[32m+[m[32m        });[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
   }[m
 [m
   // L·∫•y th·ªùi gian hi·ªán t·∫°i[m
[36m@@ -58,76 +133,26 @@[m [mclass _DashboardScreenState extends State<DashboardScreen> {[m
     });[m
   }[m
 [m
[31m-  // K·∫øt n·ªëi t·ªõi server MQTT tr√™n Raspberry Pi[m
[32m+[m[32m  // K·∫øt n·ªëi t·ªõi server WebSocket[m
   Future<void> _connectToServer() async {[m
[31m-    _client = MqttServerClient('192.168.79.91', 'flutter_client');[m
[31m-    _client!.port = 1883; // C·ªïng m·∫∑c ƒë·ªãnh c·ªßa MQTT[m
[31m-    _client!.logging(on: false);[m
[31m-    _client!.onConnected = _onConnected;[m
[31m-    _client!.onDisconnected = _onDisconnected;[m
[31m-    _client!.onSubscribed = _onSubscribed;[m
[31m-[m
[31m-    final connMessage = MqttConnectMessage()[m
[31m-        .withClientIdentifier('flutter_client')[m
[31m-        .startClean()[m
[31m-        .withWillQos(MqttQos.atLeastOnce);[m
[31m-    _client!.connectionMessage = connMessage;[m
[31m-[m
[31m-    try {[m
[31m-      await _client!.connect();[m
[31m-    } catch (e) {[m
[31m-      print('K·∫øt n·ªëi th·∫•t b·∫°i: $e');[m
[31m-      _client!.disconnect();[m
[32m+[m[32m    if (_isConnected) {[m
[32m+[m[32m      ScaffoldMessenger.of(context).showSnackBar([m
[32m+[m[32m        SnackBar(content: Text('ƒê√£ k·∫øt n·ªëi t·ªõi server')),[m
[32m+[m[32m      );[m
[32m+[m[32m      return;[m
     }[m
[31m-[m
[31m-    // L·∫Øng nghe d·ªØ li·ªáu t·ª´ server[m
[31m-    _client!.updates!.listen((List<MqttReceivedMessage<MqttMessage>>? c) {[m
[31m-      final recMess = c![0].payload as MqttPublishMessage;[m
[31m-      final payload = MqttPublishPayload.bytesToStringAsString(recMess.payload.message);[m
[31m-      setState(() {[m
[31m-        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã t·ª´ d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c[m
[31m-        if (payload.contains('device')) {[m
[31m-          final deviceName = payload.split(':')[1];[m
[31m-          final status = payload.split(':')[2] == 'ON';[m
[31m-          _deviceStatus[deviceName] = status;[m
[31m-        }[m
[31m-      });[m
[31m-    });[m
[31m-[m
[31m-    // ƒêƒÉng k√Ω topic ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ LoRa[m
[31m-    _client!.subscribe('lora/devices', MqttQos.atLeastOnce);[m
[31m-  }[m
[31m-[m
[31m-  // Khi k·∫øt n·ªëi th√†nh c√¥ng[m
[31m-  void _onConnected() {[m
[31m-    setState(() {[m
[31m-      _isConnected = true;[m
[31m-    });[m
[31m-    print('ƒê√£ k·∫øt n·ªëi t·ªõi server');[m
[31m-  }[m
[31m-[m
[31m-  // Khi m·∫•t k·∫øt n·ªëi[m
[31